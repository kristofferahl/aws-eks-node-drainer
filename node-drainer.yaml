---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: node-drainer
  namespace: kube-system

---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: node-drainer
rules:
  - apiGroups: [""]
    resources: ["pods", "pods/eviction", "nodes"]
    verbs: ["create", "list", "patch", "get"]
  - apiGroups: ["apps"]
    resources: [ "daemonsets" ]
    verbs: ["get"]
  - apiGroups: ["extensions"]
    resources: [ "daemonsets" ]
    verbs: ["get"]

---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: node-drainer
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: node-drainer
subjects:
- kind: ServiceAccount
  name: node-drainer
  namespace: kube-system
  apiGroup: ""

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: node-drainer
  namespace: kube-system
  labels:
    app.kubernetes.io/name: node-drainer
data:
  AWS_REGION: <your region>
  LIFECYCLED_SNS_TOPIC: <your sns topic>
  LIFECYCLED_CLOUDWATCH_GROUP: <your log group>
  handler.sh: |
    if [[ -z "${NODENAME}" ]]; then
      NODENAME=$(curl -fsq http://169.254.169.254/latest/meta-data/hostname)
    fi

    echo "Drainging node ${NODENAME:?}"
    kubectl drain "${NODENAME:?}" --grace-period=120 --ignore-daemonsets --force

    sleep 15
    echo 'Ready to terminate node!'

---
apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  name: node-drainer
  namespace: kube-system
spec:
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: node-drainer
      name: node-drainer
      namespace: node-drainer
    spec:
      serviceAccount: node-drainer
      serviceAccountName: node-drainer
      tolerations:
        - key: node-role.kubernetes.io/master
          effect: NoSchedule
      containers:
        - name: node-drainer
          image: kristofferahl/eks-node-drainer:1.0.0
          imagePullPolicy: Always
          command:
            - /usr/bin/lifecycled
          args:
            - "--handler=/entrypoint.sh"
            - "--json"
          env:
            - name: HANDLER_SCRIPT
              value: /node-drainer/handler.sh
            - name: AWS_REGION
              valueFrom:
                configMapKeyRef:
                  name: node-drainer
                  key: AWS_REGION
            - name: LIFECYCLED_SNS_TOPIC
              valueFrom:
                configMapKeyRef:
                  name: node-drainer
                  key: LIFECYCLED_SNS_TOPIC
            - name: LIFECYCLED_CLOUDWATCH_GROUP
              valueFrom:
                configMapKeyRef:
                  name: node-drainer
                  key: LIFECYCLED_CLOUDWATCH_GROUP
            - name: NODENAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          resources:
            limits:
              memory: 200Mi
            requests:
              cpu: 100m
              memory: 200Mi
          volumeMounts:
            - name: node-drainer
              mountPath: /node-drainer/
      volumes:
        - name: node-drainer
          configMap:
            name: node-drainer
            items:
              - key: handler.sh
                path: handler.sh
